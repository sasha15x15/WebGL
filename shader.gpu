// Vertex Shader
const vertexShaderSource = 
`attribute vec3 aPosition;        
attribute vec3 aNormal;          
attribute vec3 aTangent;         
attribute vec2 aTexCoord;        

uniform mat4 uModelViewMatrix;   
uniform mat4 uProjectionMatrix;  
uniform mat4 uNormalMatrix;      

// Additional uniforms for texture scaling
uniform float uTextureScale;
uniform vec2 uStartScalePoint;

// Varying variables to fragment shader
varying vec3 vPosWorld;          
varying vec2 vTexCoord;          
varying mat3 vTBN;               

void main() {
    // 1) World-space position
    vec4 posWorld4 = uModelViewMatrix * vec4(aPosition, 1.0);
    vPosWorld = posWorld4.xyz;

    // 2) Transform normal
    vec3 N = normalize(mat3(uNormalMatrix) * aNormal);

    // 3) Transform tangent, orthogonalize
    vec3 T = normalize(mat3(uNormalMatrix) * aTangent);
    T = normalize(T - dot(T, N) * N);

    // 4) Bitangent
    vec3 B = cross(N, T);

    // 5) TBN
    vTBN = mat3(T, B, N);

    // 6) Texture scaling around center
    vec2 shifted = aTexCoord - uStartScalePoint;
    
    shifted *= uTextureScale;
    shifted += uStartScalePoint;
    vTexCoord = clamp(shifted, 0.0, 1.0); // Clamping to [0,1]
    
    // 7) Final position
    gl_Position = uProjectionMatrix * posWorld4;
}`;

// Fragment Shader
const fragmentShaderSource = 
`#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

// Lighting
uniform vec3  uLightPos;     
uniform float uAmbientFactor;
uniform float uDiffuseFactor;
uniform float uSpecularFactor;
uniform float uShininess;

// Base color
uniform vec4 uColor;         

// Camera direction
uniform vec3 uViewDir;       

// Textures
uniform sampler2D uDiffuseSampler;  
uniform sampler2D uSpecularSampler; 
uniform sampler2D uNormalSampler;   

// Varyings
varying vec3 vPosWorld;
varying vec2 vTexCoord;
varying mat3 vTBN;

void main() {
    // 1) Normal from normal map, transform to world space
    vec3 textureNormal = texture2D(uNormalSampler, vTexCoord).rgb;
    textureNormal = 2.0 * textureNormal - 1.0;
    vec3 N = normalize(vTBN * textureNormal);

    // 2) Light direction
    vec3 L = normalize(uLightPos - vPosWorld);

    // 3) View direction
    vec3 V = normalize(uViewDir);

    // 4) Reflection vector
    vec3 R = reflect(-L, N);

    // 5) Phong components
    float ambient  = uAmbientFactor;
    float diff     = max(dot(N, L), 0.0);
    float diffuse  = uDiffuseFactor * diff;
    float specTerm = max(dot(R, V), 0.0);
    float specular = uSpecularFactor * pow(specTerm, uShininess);

    // Textures
    vec3 diffuseTex  = texture2D(uDiffuseSampler,  vTexCoord).rgb;
    vec3 specularTex = texture2D(uSpecularSampler, vTexCoord).rgb;

    vec3 color = diffuseTex * diffuse + specularTex * specular + (ambient * diffuseTex);

    // Write final pixel color
    gl_FragColor = vec4(color, 1.0) * uColor; 
}`;
